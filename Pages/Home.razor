@page "/"
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using CentralBemEstarAssemblyIOS.Models
@using CentralBemEstarAssemblyIOS.Services


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Insulina</title>
    <style>
        body {
        font-family: Arial, sans-serif;
        text-align: center;
        }

        .container {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        }

        input {
        margin: 5px;
        padding: 8px;
        width: 100%;
        }

        .button_bonito{
        margin: 5px;
        padding: 8px;
        width: 100%;
        }
        #resultado {
        font-size: 1.2em;
        font-weight: bold;
        margin-top: 10px;
        }

        .hidden {
        display: none;
        }

        .table-container {
        max-width: 100%;
        overflow-x: auto; /* Habilita rolagem horizontal */
        }
        /* Aumenta o padding do cabeçalho */
        .table-custom th {
        padding: 1.5rem; /* Ajuste o valor conforme necessário */
        text-align: center; /* Opcional: centraliza o texto */
        font-size: 1.2rem; /* Opcional: aumenta o tamanho da fonte */
        }



    </style>
</head>
<body>
    <!-- Button trigger modal -->
    <button type="button" id="mostrarIsulinaNaTela" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" hidden>
        Botao escondido
    </button>


    <div class="container">
        <h2>Calculadora de Insulina</h2>
        <div class="row g-3">

            <label>Glicemia Atual:</label>
            <input class="form-control" type="number" id="glicemia" placeholder="Digite a glicemia">

            <label>Carboidratos Ingeridos:</label>
            <input class="form-control" type="number" id="carbo" placeholder="Digite os carboidratos">
            <label for="country" class="form-label">Refeição</label>
            <select class="form-select" id="refeicao">
                aria-label="Refeição">
                <option value="CAFÉ">Café</option>
                <option value="ALMOÇO">Almoço</option>
                <option value="LANCHE">Lanche</option>
                <option value="JANTAR">Jantar</option>
                <option value="CEIA">Ceia</option>
            </select>



        </div>

        <button class="btn btn-primary button_bonito" onclick="calcularInsulina()">Calcular Insulina</button>


        <button class="btn btn-primary button_bonito" onclick="mostrarBaseDados()">Base de Dados Médico</button>
    </div>

    <div class="container hidden" id="baseDadosContainer">
        <h2>Base de Dados Médico</h2>
        <p>Última atualização baixada do google sheet: <span id="ultimaModificacao"></span></p>
        <div class="table-responsive">
            <table class="table table-custom" border="1" width="100%">
                <tr>
                    <th scope="col">Refeição</th>
                    <th scope="col">Insulina</th>
                    <th scope="col">CHO</th>
                    <th scope="col">Meta</th>
                    <th scope="col">FS</th>
                </tr>
                <tbody id="baseDados"></tbody>
            </table>
        </div>
        <button class="btn btn-secondary button_bonito" @onclick="BaixarDadosDoGoogleSheetEInserirNoBanco">Sicronizar com google sheet</button>
        <button class="btn btn-primary button_bonito" @onclick="SalvarBaseDeDados">Salvar Alterações</button>

    </div>
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen-sm-down">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel"></h1>
                    <button type="button" class="btn-close button_bonito" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <div class="text-center">
                        <p id="resultado" class="fs-3">Conteúdo do Modal</p>

                    </div>
                </div>
                <div class="modal-footer mt-auto">
                    <button type="button" class="btn btn-danger button_bonito" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

    <script>

        let baseDados ={};

        let ultimaAtualizacaoBaseDeDados ="";


        function calcularInsulina() {
        let glicemia = parseFloat(document.getElementById('glicemia').value);
        let carbo = parseFloat(document.getElementById('carbo').value);
        let refeicao = document.getElementById('refeicao').value;

        if (isNaN(glicemia) || isNaN(carbo)) {
        alert("Por favor, preencha todos os campos corretamente.");
        return;
        }

        let dados = baseDados[refeicao];
        let insulina = ((glicemia - dados.meta) / dados.fs) + (carbo / dados.cho) * dados.insulina;
        document.getElementById('resultado').innerText = "Insulina a aplicar: " + insulina.toFixed(2);

        var hiddenButton = document.getElementById("mostrarIsulinaNaTela");
        // Remove a classe d-none para mostrar o botão

        // Simula um clique no botão oculto
        hiddenButton.click();
        }

        async function mostrarBaseDados() {
        let container = document.getElementById('baseDadosContainer');
        container.classList.toggle('hidden');  // Alterna a visibilidade do container

        let tbody = document.getElementById('baseDados');
        tbody.innerHTML = "";  // Limpa o conteúdo da tabela

        // Itera sobre o objeto baseDados
        for (let refeicao in baseDados) {
        let dados = baseDados[refeicao];

        // Cria uma nova linha de tabela
        let tr = document.createElement('tr');

        // Cria as células da linha e insere os dados
        let td1 = document.createElement('td');
        td1.textContent = refeicao;
        tr.appendChild(td1);

        let td2 = document.createElement('td');
        let inputInsulina = document.createElement('input');
        inputInsulina.type = "number";
        inputInsulina.className = "form-control";
        inputInsulina.value = dados.insulina;
        inputInsulina.onchange = () => atualizarBase(refeicao, 'insulina', inputInsulina.value);
        td2.appendChild(inputInsulina);
        tr.appendChild(td2);

        let td3 = document.createElement('td');
        let inputCho = document.createElement('input');
        inputCho.type = "number";
        inputCho.className = "form-control";
        inputCho.value = dados.cho;
        inputCho.onchange = () => atualizarBase(refeicao, 'cho', inputCho.value);
        td3.appendChild(inputCho);
        tr.appendChild(td3);

        let td4 = document.createElement('td');
        let inputMeta = document.createElement('input');
        inputMeta.type = "number";
        inputMeta.className = "form-control";
        inputMeta.value = dados.meta;
        inputMeta.onchange = () => atualizarBase(refeicao, 'meta', inputMeta.value);
        td4.appendChild(inputMeta);
        tr.appendChild(td4);

        let td5 = document.createElement('td');
        let inputFs = document.createElement('input');
        inputFs.type = "number";
        inputFs.className = "form-control";
        inputFs.value = dados.fs;
        inputFs.onchange = () => atualizarBase(refeicao, 'fs', inputFs.value);
        td5.appendChild(inputFs);
        tr.appendChild(td5);

        // Adiciona a linha criada ao tbody
        tbody.appendChild(tr);
        }

        // Atualiza a última modificação
        document.getElementById("ultimaModificacao").innerText = ultimaAtualizacaoBaseDeDados;
        }



        function atualizarBase(refeicao, campo, valor) {
        baseDados[refeicao][campo] = parseFloat(valor);
        }


        async function salvarBaseDadosAvisoDeSucesso() {
        //localStorage.setItem('baseDados', JSON.stringify(baseDados));
        alert("Base de dados salva com sucesso!");
        location.reload();
        }


        async function GetBaseDeDadosBancoInfo() {

        return JSON.stringify(baseDados)
        }
        async function GetBaseDeDadosBancoMock(json,ultimaAtualizacao) {
        console.log(json)
        baseDados ={}
        baseDados = JSON.parse(json)
        ultimaAtualizacaoBaseDeDados = ultimaAtualizacao

        }
        async function GetAtualizacaoDeDadosGoogleSheetAviso() {

        alert("Sincronizado com sucesso!")

        location.reload();

        }


    </script>
    <script src="indexedDBHelper.js"></script>
</body>
</html>
@code {
    public async Task<String> GetBaseDeDadosBanco()
    {
        DatabaseService _databaseService = new DatabaseService(JSRuntime);
        await _databaseService.InitializeAsync(JSRuntime);
        var baseDeDados = await _databaseService.ListarBaseDeDadosAsync();
        var ultimaAtualizacaoBase = await _databaseService.GetUltimaAtualizacaoDoGoogleSheet();

        Dictionary<string, Dictionary<string, double>> listaComDadosPrincipal = new Dictionary<string, Dictionary<string, double>>();

        foreach (var linha in baseDeDados)
        {
            var keyValuePairs = new Dictionary<string, double>
                        {
                        {"insulina", linha.Insulina},
                        {"cho", linha.CHO},
                        {"meta", linha.Meta},
                        {"fs", linha.FS}
                        };
            listaComDadosPrincipal[linha.Refeicao] = keyValuePairs;
        }

        var options = new JsonSerializerOptions
            {
                WriteIndented = true, // Formatar JSON de maneira legível
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping // Permitir caracteres especiais
            };

        var JsonTratado = JsonSerializer.Serialize(listaComDadosPrincipal, options).ToString();
        var JsonTratadoPorJavascript = await JSRuntime.InvokeAsync<string>("GetBaseDeDadosBancoMock", JsonTratado, ultimaAtualizacaoBase);
        return JsonTratadoPorJavascript;

    }
    protected override async Task OnInitializedAsync()
    {
        DatabaseService _databaseService = new DatabaseService(JSRuntime);
        await _databaseService.InitializeAsync(JSRuntime);
        await _databaseService.InicializarBancoDeDados();
        await _databaseService.InserirDadosIniciais();
        await GetBaseDeDadosBanco();
    }

   
    public async Task<String> SalvarBaseDeDados(){
        var BaseDeDadosAtualizarNoBanco = await JSRuntime.InvokeAsync<String>("GetBaseDeDadosBancoInfo");
        if(BaseDeDadosAtualizarNoBanco != null){
            Dictionary<string, Meal> meals = JsonSerializer.Deserialize<Dictionary<string, Meal>>(BaseDeDadosAtualizarNoBanco);

            foreach (var mealInstance in meals)
            {
                String key = mealInstance.Key;
                Meal meal = mealInstance.Value;
                await JSRuntime.InvokeVoidAsync("indexedDBHelper.saveItem", "usuarios", key, meal);
            }

            await JSRuntime.InvokeVoidAsync("salvarBaseDadosAvisoDeSucesso"); 
        }
        return String.Empty;
    }
    public async Task<bool> BaixarDadosDoGoogleSheetEInserirNoBanco()
    {
        var configuracaoGoogleSheet = await JSRuntime.InvokeAsync<Configs>("indexedDBHelper.getItem", "configs", "UNICO");
        try
        {
            var partes = configuracaoGoogleSheet.LinkGoogleSheet.Split('/');
            var id = partes[5];
            string urlTransformadaParaCSV = $"https://docs.google.com/spreadsheets/d/{id}/export?format=csv";
            var httpClient = new HttpClient();
            var resposta = await httpClient.GetStringAsync(urlTransformadaParaCSV);

            var linhas = resposta.Split("\n");
            var contador = 0;
            List<BaseDeDadosMedicos> baseDeDadosParaAdicionarNoBanco = new List<BaseDeDadosMedicos>();

            foreach (var linha in linhas)
            {
                if (contador == 0)
                {
                    contador++;
                    continue;
                }

                var colunas = linha.Replace("\r", "").Split(",");
                string refeicao = colunas[0];
                double insulina = Convert.ToDouble(colunas[1].Replace(".", ","));
                double cho = Convert.ToDouble(colunas[2].Replace(".", ","));
                double meta = Convert.ToDouble(colunas[3].Replace(".", ","));
                double fs = Convert.ToDouble(colunas[4].Replace(".", ","));

                BaseDeDadosMedicos baseDeDadosMedicos = new BaseDeDadosMedicos
                    {
                        Refeicao = refeicao,
                        Insulina = insulina,
                        CHO = cho,
                        Meta = meta,
                        FS = fs,
                        UltimaAtualizacaoServicoExterno = DateTime.Now
                    };
                baseDeDadosParaAdicionarNoBanco.Add(baseDeDadosMedicos);
                await JSRuntime.InvokeVoidAsync("indexedDBHelper.saveItem", "usuarios", refeicao, baseDeDadosMedicos);
                contador++;
            }

            var todosOsDados = await JSRuntime.InvokeAsync<List<BaseDeDadosMedicos>>("indexedDBHelper.getAllItems", "usuarios");
            var itensParaRemover = todosOsDados
                .Where(a1 => !baseDeDadosParaAdicionarNoBanco.Any(a2 => a1.Refeicao == a2.Refeicao))
                .ToList();

            foreach (var item in itensParaRemover)
            {
                await JSRuntime.InvokeVoidAsync("indexedDBHelper.deleteItem", "usuarios", item.Refeicao);
            }
            await JSRuntime.InvokeVoidAsync("GetAtualizacaoDeDadosGoogleSheetAviso");
        

            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }
}

